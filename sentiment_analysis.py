# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qq7vrPLvXfvuMW95PZ9yvnYhLmBhIkEa
"""

!pip install nltk scikit-learn pandas matplotlib

import nltk
from nltk.corpus import movie_reviews

nltk.download('movie_reviews')

# Data load
documents = [(list(movie_reviews.words(fileid)), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]

print(f"Total Reviews: {len(documents)}")

import string
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

nltk.download('stopwords')
nltk.download('wordnet')

lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words("english"))

def preprocess_text(words):
    words = [word.lower() for word in words if word.isalpha()]  # Remove punctuation
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]  # Lemmatization & Stopwords removal
    return " ".join(words)

# Apply preprocessing
documents = [(preprocess_text(words), category) for words, category in documents]

from sklearn.feature_extraction.text import TfidfVectorizer

# Data split
X = [doc for doc, category in documents]
y = [category for doc, category in documents]

vectorizer = TfidfVectorizer(max_features=5000)
X_tfidf = vectorizer.fit_transform(X)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)

# Train Model
model = LogisticRegression()
model.fit(X_train, y_train)

# Accuracy Check
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

def predict_sentiment(review):
    review = preprocess_text(review.split())  # Cleaning
    review_tfidf = vectorizer.transform([review])  # Convert to TF-IDF
    prediction = model.predict(review_tfidf)[0]  # Model prediction
    return "Positive" if prediction == "pos" else "Negative"

# Example Input
user_review = "The movie was absolutely amazing with great storytelling!"
print(f"Predicted Sentiment: {predict_sentiment(user_review)}")